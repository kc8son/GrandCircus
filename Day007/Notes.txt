STUDENT DATABASE 2.0
Objectives: Lists, Dictionaries, Nested Sequences

Task: In the previous Student Database lab, information about students was stored in three separate lists. This time, rebuild the functionality using a single list filled with a dictionary for each student, such as the example below. Users may now also add students.

[
  { "name": "Tina", "hometown": "Portland", "favorite_food": "puppy chow" },
  { "name": "Klaus", "hometown": "Frankfurt", "favorite_food": "pizza" },
  { "name": "Julia", "hometown": "Houston", "favorite_food": "shrimp" }
]

Build Specifications:
At the top of main.py, create a list of dictionaries to store data about three or more students. You can pick the names, hometowns, and favorite foods, or just use the list above.
Write a function list_names that…
takes in the list of students as a parameter
loops through the list and prints out their name along with their position in the list (index + 1). For example,
1. Tina
2. Klaus
3. Julia
returns nothing
At the start, ask the user whether they'd like to select one of the following options:
Type in "add" to create a new student
Type in "view" to look at existing students
Type in "quit" to exit the main loop of the program
For quit, end the main loop of the program and print a goodbye message. Given any option besides quit, loop back up top to the top of the program.
For view, call list_names to print the number and name of each student in our list. Allow the user to select a student to view by selecting an index. Once selected, print out the student's name and ask whether they'd like to see that student's hometown or favorite food.
Write a function named get_new_student that…
takes no parameters
Creates a new dictionary.
Asks the user for each of the three data points: name, hometown, and favorite food. Then adds each value to the dictionary.
Returns the dictionary.
For add, first call get_new_student in order to create a dictionary for the new student. Then add that new dictionary to the end of the existing list.

Extended Challenges:
Allow the user to select students by inputting their name in addition to allowing them to select by index.
Add in validation for the initial menu. Print a message and retry if the user inputs something other than "add", "view", or "quit"
Add in validation for the view menu. If a bad index is given or a name isn't present in the list of dictionaries, print an appropriate error message and retry that question.
Add validation for the hometown/favorite food portion of the view, if you get any other inputs, print an error message and try that question again.

Hint: For the validation challenges look into either loops or recursion (if you used functions in your code).





Example Run:

Please select which action you'd like to do: add, view, or quit
> view
1. Tina
2. Klaus
3. Julia
Which student would you like to learn more about? Enter a number 1-3:
> 2
Student 2 is Klaus. What would you like to know?
    Enter "hometown" or "favorite food"
> hometown
Klaus is from Frankfurt

Please select which action you'd like to do: add, view, or quit
> add
Please input a name for the new student:
> Sergei
Next please input their hometown:
> Saint Petersburg
Last please input their favorite food
> dumplings

Please select which action you'd like to do: add, view, or quit
> view
1. Tina
2. Klaus
3. Julia
4. Sergei
Which student would you like to learn more about? Enter a number 1-4:
> 4
Student 4 is Sergei. What would you like to know?
    Enter "hometown" or "favorite food"
> hometown
Sergei is from Saint Petersburg

Please select which action you'd like to do: add, view, or quit
> quit
Good bye!




