//	Joe Merten - Homework assignment - People Pt.1 (MongoDB Queries)

In people collection
 1 - Add a person to the collection. You pick the data, but they should have an empty array for children.
 2 - Add another person. They should have at least two children.
 3 - Update one person named Clarence. He moved from North Dakota to South Dakota.
 4 - Update Rebecca Hayes. Remove her email address.
 5 - Update everyone from Missouri. They all had a birthday today, so add one to their age. (expect 4 matches)
 6 - Jerry Baker has updated information. Replace with a new document:
{ first_name: "Jerry", last_name: "Baker-Mendez", email: "jerry@classic.ly", gender:"Male", age: 28, state: "Vermont", "children": [{name: "Alan", age: 18}, {name: "Jenny", age: 3}] }
 7 - Delete Wanda Bowman.
 8 - Delete everyone who does not have an email address specified. (expect 36 matches - maybe more depending what you added above)

In submissions collection
 9 - Add several documents to a new submissions collection. Do it all in one command. (Remember, MongoDB will create the collection for you. Just start adding documents.)
	A - title: "The River Bend", upvotes: 10, downvotes: 2, artist: <ID of Anna Howard>
	B - title: "Nine Lives", upvotes: 7, downvotes: 0, artist: <ID of Scott Henderson>
	C - title: "Star Bright", upvotes: 19, downvotes: 3, artist: <ID of Andrea Burke>
	D - title: "Why Like This?", upvotes: 1, downvotes: 5, artist: <ID of Steven Marshall>
	E - title: "Non Sequitur", upvotes: 11, downvotes: 1, artist: <ID of Gerald Bailey>
10 - Add 2 upvotes for "The River Bend".
11 - Add a field round2 = true to all submissions with at least 10 upvotes. (expect 3 matches)

Extended Challenges:
12 - Update Helen Clark. She had a baby! Add a child, name: Melanie, age: 0.
13 - Joan Bishop has a child named Catherine. She just had a birthday and prefers to go by "Cat". In one query update the child's name to "Cat" and increment her age by one.
14 - List all submissions that have more downvotes than upvotes.







List all people. (200)
db.people.find()

Count all people. (200)
db.people.find().count()

List all people in Arizona. (6)
db.people.find({ state: { $eq: 'Arizona' } })

List all males in Arizona. (2)
db.people.find( 
    {$and: [
		{ state: { $eq: 'Arizona' } },
		{ gender: { $eq: 'Male' } }
	] }
)

List all people in Arizona plus New Mexico. (8)
db.people.find( 
    {$or: [
		{ state: { $eq: 'Arizona' } },
		{ state: { $eq: 'New Mexico' } }
	] }
)


List all people under age 40. (90)
db.people.find({ age: { $lt: 40 } })

List all females in Florida between the ages of 40 and 45 (inclusive). (4)
db.people.find( 
    {$and: [
		{ state: { $eq: 'Florida' } },
		{ age: { $gte: 40 } },
		{ age: { $lte: 45 } },
		{ gender: { $eq: 'Female' } }
	] }
)


List people whose first name starts with "H". (2)
db.people.find( 
    { first_name: /^H/}
)

List all people in Michigan, sorted by first name. (6)
db.people.find({ state: { $eq: 'Michigan' } }).sort({"first_name":1})


List all people who live in Virginia or are named Virginia.
db.people.find( 
    {$or: [
		{ state: { $eq: 'Virginia' } },
		{ first_name: { $eq: 'Virginia' } }
	] }
)


List the names of people under age 30. Only display their first and last name. (38)
db.people.find( 
    { age: { $lt: 30} },
	{ first_name: true, last_name: true }
)


List all people in Montana. Display all information except age. (2)
db.people.find( 
    { state: { $eq: 'Montana' }},
	{ age: false }
)


List the email addresses of people with a ".edu" email. Only display the email. (12)
db.people.find( 
    { email: /.edu$/},
	{ email: true}
)


Extended Challenges:
========================
Count all people with at least one child under age four. (69)
////	This is the hardrst of the three!!
////	From this article: https://stackoverflow.com/questions/23553922/mongodb-find-inside-sub-array
db.people.find({
   children:{
      $elemMatch:{
         age:{
            $lt:4
         }
      }
   }
})

List people who have no children. (43)
db.people.find( 
	{ children: { $exists: true, $size: 0} }
)
/////  $exists doesn't work since there's an empty list
db.people.find( 
	{ children: { $exists: false}}
)


List people who have at least one child. (157)
db.people.find( 
	{ children: { $exists: true, $not: {$size: 0} } })






	---notes---
"^xxx" - begins with
"xxx$" - ends with

{ $match: { language: { $exists: true}}}


db.collection1.find({ age: { $gt: 30 } }).forEach(function(doc) {
  db.collection2.insert(doc);
});


db.collection1.find({ age: { $gt: 30 } }).forEach(function(doc) {
  db.collection2.insert(doc);
});

